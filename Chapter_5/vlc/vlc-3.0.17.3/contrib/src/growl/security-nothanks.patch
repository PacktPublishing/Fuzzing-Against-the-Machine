--- a/Core/Source/GNTPKey.m	2018-02-28 01:36:15.000000000 +0100
+++ b/Core/Source/GNTPKey.m	2018-02-28 01:36:47.000000000 +0100
@@ -7,7 +7,6 @@
 //
 
 #import "GNTPKey.h"
-#import <openssl/evp.h>
 #import <Security/SecRandom.h>
 #import <CommonCrypto/CommonCryptor.h>
 #import <CommonCrypto/CommonDigest.h>
@@ -355,8 +354,8 @@
 {
 	NSData *ivData = nil;
 
-	const 
-	EVP_CIPHER *cipher = nil;
+	//const 
+	//EVP_CIPHER *cipher = nil;
 	NSInteger blockSize = 0;
 	switch ([self encryptionAlgorithm])
 	{
@@ -369,12 +368,12 @@
 		if (iv) {
 			bzero(iv, blockSize * sizeof(unsigned char));
 			//unsigned char evpKey[EVP_MAX_KEY_LENGTH] = {"\0"};
-			if (cipher) {
+			//if (cipher) {
             /* TODO: Find replacement for EVP in OpenSSL*/
             
 				//Cast explanation: EVP_BytesToKey takes an int for the length, but NSData's length method returns NSUInteger. As long as encryption keys are created by hashing strings, they are not likely to ever be large enough for their lengths to exceed the range of an int.
 				//EVP_BytesToKey(cipher, EVP_md5(), NULL, (const unsigned char*)[[self encryptionKey] bytes], (int)[[self encryptionKey] length], 1, evpKey, iv);
-			}
+			//}
 			
 			ivData = [NSData dataWithBytesNoCopy:iv length:blockSize freeWhenDone:YES];
 		}
