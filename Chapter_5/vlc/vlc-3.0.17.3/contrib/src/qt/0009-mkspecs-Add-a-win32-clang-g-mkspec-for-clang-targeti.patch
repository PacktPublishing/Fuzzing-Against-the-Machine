From a616c80783949d1164a4f6e79f4db2291aad834c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Martin=20Storsj=C3=B6?= <martin@martin.st>
Date: Wed, 24 Jan 2018 10:41:58 +0200
Subject: [PATCH 9/9] mkspecs: Add a win32-clang-g++ mkspec, for clang
 targeting mingw, like g++

Change-Id: I427e46e6c34c2beeb2a815f1af512e4e8bd213c2
Reviewed-by: Oswald Buddenhagen <oswald.buddenhagen@qt.io>
Backport-Of: 96e3985963a20a84bb8ff7032d77531641512d1d (5.11 branch)

This is an adapted backport, keeping win32-clang-g++ similar to
win32-g++, with the following differences:

-QMAKE_COMPILER          = gcc
+QMAKE_COMPILER          = gcc clang llvm   # clang pretends to be gcc

-QMAKE_CC                = $${CROSS_COMPILE}gcc
+QMAKE_CC                = $${CROSS_COMPILE}clang

-QMAKE_CFLAGS            = -pipe -fno-keep-inline-dllexport
+QMAKE_CFLAGS            = -pipe

-QMAKE_CFLAGS_WARN_ON    = -Wall -Wextra
+QMAKE_CFLAGS_WARN_ON    = -Wall -Wextra -Wno-ignored-attributes

-QMAKE_CXX               = $${CROSS_COMPILE}g++
+QMAKE_CXX               = $${CROSS_COMPILE}clang++

-QMAKE_LINK              = $${CROSS_COMPILE}g++
-QMAKE_LINK_C            = $${CROSS_COMPILE}gcc
+QMAKE_LINK              = $${CROSS_COMPILE}clang++
+QMAKE_LINK_C            = $${CROSS_COMPILE}clang

On branches before Qt 5.9, configure also needs a change like this,
to support a mingw mkspec with a different name than the existing:
-        case `basename "$XPLATFORM"` in win32-g++*)
+        case `basename "$XPLATFORM"` in win32-*g++*)

This isn't necessary any longer after
ab0cc3055d3d1f0faa98f96a7e8ae58b6ef6461a, which became part of v5.9.0.
---
 configure                               |   2 +-
 mkspecs/win32-clang-g++/qmake.conf      | 118 ++++++++++++++++++++++++++++++++
 mkspecs/win32-clang-g++/qplatformdefs.h |  40 +++++++++++
 3 files changed, 159 insertions(+), 1 deletion(-)
 create mode 100644 mkspecs/win32-clang-g++/qmake.conf
 create mode 100644 mkspecs/win32-clang-g++/qplatformdefs.h

diff --git a/configure b/configure
index 6ebeab30fe..fa0aae8300 100755
--- a/configure
+++ b/configure
@@ -1429,7 +1429,7 @@ while [ "$#" -gt 0 ]; do
         ;;
     xplatform)
         XPLATFORM="$VAL"
-        case `basename "$XPLATFORM"` in win32-g++*)
+        case `basename "$XPLATFORM"` in win32-*g++*)
             XPLATFORM_MINGW=yes
             CFG_RPATH=no
             CFG_REDUCE_EXPORTS=no
diff --git a/mkspecs/win32-clang-g++/qmake.conf b/mkspecs/win32-clang-g++/qmake.conf
new file mode 100644
index 0000000000..7673fd0549
--- /dev/null
+++ b/mkspecs/win32-clang-g++/qmake.conf
@@ -0,0 +1,118 @@
+#
+# qmake configuration for win32-clang-g++
+#
+# Written for MinGW-w64 / clang 6.0 or higher
+#
+# Cross compile example for x86_64-w64-mingw32-clang++:
+#   configure -xplatform win32-clang-g++ -device-option CROSS_COMPILE=x86_64-w64-mingw32-
+#
+
+load(device_config)
+include(../common/angle.conf)
+
+MAKEFILE_GENERATOR      = MINGW
+QMAKE_PLATFORM          = win32 mingw
+CONFIG                 += debug_and_release debug_and_release_target precompile_header
+DEFINES                += UNICODE
+QMAKE_COMPILER_DEFINES += __GNUC__ WIN32
+
+QMAKE_EXT_OBJ           = .o
+QMAKE_EXT_RES           = _res.o
+
+QMAKE_COMPILER          = gcc clang llvm   # clang pretends to be gcc
+
+QMAKE_CC                = $${CROSS_COMPILE}clang
+QMAKE_LEX               = flex
+QMAKE_LEXFLAGS          =
+QMAKE_YACC              = bison -y
+QMAKE_YACCFLAGS         = -d
+QMAKE_CFLAGS            = -pipe
+QMAKE_CFLAGS_DEPS       = -M
+QMAKE_CFLAGS_WARN_ON    = -Wall -Wextra -Wno-ignored-attributes
+QMAKE_CFLAGS_WARN_OFF   = -w
+QMAKE_CFLAGS_RELEASE    = -O2
+QMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO = -O2 -g
+QMAKE_CFLAGS_DEBUG      = -g
+QMAKE_CFLAGS_YACC       = -Wno-unused -Wno-parentheses
+QMAKE_CFLAGS_SPLIT_SECTIONS = -ffunction-sections
+QMAKE_CFLAGS_SSE2       = -msse2 -mstackrealign
+QMAKE_CFLAGS_SSE3       = -msse3
+QMAKE_CFLAGS_SSSE3      = -mssse3
+QMAKE_CFLAGS_SSE4_1     = -msse4.1
+QMAKE_CFLAGS_SSE4_2     = -msse4.2
+QMAKE_CFLAGS_AVX        = -mavx
+QMAKE_CFLAGS_AVX2       = -mavx2
+QMAKE_CFLAGS_NEON       = -mfpu=neon
+
+QMAKE_CXX               = $${CROSS_COMPILE}clang++
+QMAKE_CXXFLAGS          = $$QMAKE_CFLAGS
+QMAKE_CXXFLAGS_DEPS     = $$QMAKE_CFLAGS_DEPS
+QMAKE_CXXFLAGS_WARN_ON  = $$QMAKE_CFLAGS_WARN_ON
+QMAKE_CXXFLAGS_WARN_OFF = $$QMAKE_CFLAGS_WARN_OFF
+QMAKE_CXXFLAGS_RELEASE  = $$QMAKE_CFLAGS_RELEASE
+QMAKE_CXXFLAGS_RELEASE_WITH_DEBUGINFO = $$QMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO
+QMAKE_CXXFLAGS_DEBUG    = $$QMAKE_CFLAGS_DEBUG
+QMAKE_CXXFLAGS_YACC     = $$QMAKE_CFLAGS_YACC
+QMAKE_CXXFLAGS_THREAD   = $$QMAKE_CFLAGS_THREAD
+QMAKE_CXXFLAGS_RTTI_ON  = -frtti
+QMAKE_CXXFLAGS_RTTI_OFF = -fno-rtti
+QMAKE_CXXFLAGS_EXCEPTIONS_ON = -fexceptions -mthreads
+QMAKE_CXXFLAGS_EXCEPTIONS_OFF = -fno-exceptions
+QMAKE_CXXFLAGS_CXX11    = -std=c++0x
+QMAKE_CXXFLAGS_CXX14    = -std=c++1y
+QMAKE_CXXFLAGS_CXX1Z    = -std=c++1z
+QMAKE_CXXFLAGS_GNUCXX11 = -std=gnu++0x
+QMAKE_CXXFLAGS_GNUCXX14 = -std=gnu++1y
+QMAKE_CXXFLAGS_GNUCXX1Z = -std=gnu++1z
+QMAKE_CXXFLAGS_SPLIT_SECTIONS = $$QMAKE_CFLAGS_SPLIT_SECTIONS
+
+QMAKE_INCDIR            =
+
+QMAKE_RUN_CC            = $(CC) -c $(CFLAGS) $(INCPATH) -o $obj $src
+QMAKE_RUN_CC_IMP        = $(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<
+QMAKE_RUN_CXX           = $(CXX) -c $(CXXFLAGS) $(INCPATH) -o $obj $src
+QMAKE_RUN_CXX_IMP       = $(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<
+
+QMAKE_LINK              = $${CROSS_COMPILE}clang++
+QMAKE_LINK_C            = $${CROSS_COMPILE}clang
+QMAKE_LFLAGS            =
+QMAKE_LFLAGS_EXCEPTIONS_ON = -mthreads
+QMAKE_LFLAGS_EXCEPTIONS_OFF =
+QMAKE_LFLAGS_RELEASE    = -Wl,-s
+QMAKE_LFLAGS_DEBUG      =
+QMAKE_LFLAGS_CONSOLE    = -Wl,-subsystem,console
+QMAKE_LFLAGS_WINDOWS    = -Wl,-subsystem,windows
+QMAKE_LFLAGS_DLL        = -shared
+QMAKE_LFLAGS_CXX11      =
+QMAKE_LFLAGS_CXX14      =
+QMAKE_LFLAGS_CXX1Z      =
+QMAKE_LFLAGS_GCSECTIONS = -Wl,--gc-sections
+equals(QMAKE_HOST.os, Windows) {
+    QMAKE_LINK_OBJECT_MAX = 10
+    QMAKE_LINK_OBJECT_SCRIPT = object_script
+}
+QMAKE_PREFIX_SHLIB      =
+QMAKE_EXTENSION_SHLIB   = dll
+QMAKE_PREFIX_STATICLIB  = lib
+QMAKE_EXTENSION_STATICLIB = a
+QMAKE_LIB_EXTENSIONS    = a dll.a
+
+QMAKE_LIBS              =
+QMAKE_LIBS_CORE         = -lole32 -luuid -lws2_32 -ladvapi32 -lshell32 -luser32 -lkernel32
+QMAKE_LIBS_GUI          = -lgdi32 -lcomdlg32 -loleaut32 -limm32 -lwinmm -lws2_32 -lole32 -luuid -luser32 -ladvapi32
+QMAKE_LIBS_NETWORK      = -lws2_32
+QMAKE_LIBS_OPENGL       = -lglu32 -lopengl32 -lgdi32 -luser32
+QMAKE_LIBS_OPENGL_ES2   = -l$${LIBEGL_NAME} -l$${LIBGLESV2_NAME} -lgdi32 -luser32
+QMAKE_LIBS_OPENGL_ES2_DEBUG = -l$${LIBEGL_NAME}d -l$${LIBGLESV2_NAME}d -lgdi32 -luser32
+QMAKE_LIBS_COMPAT       = -ladvapi32 -lshell32 -lcomdlg32 -luser32 -lgdi32 -lws2_32
+QMAKE_LIBS_QT_ENTRY     = -lmingw32 -lqtmain
+
+QMAKE_IDL               = midl
+QMAKE_LIB               = $${CROSS_COMPILE}ar -rc
+QMAKE_RC                = $${CROSS_COMPILE}windres
+
+QMAKE_STRIP             = $${CROSS_COMPILE}strip
+QMAKE_STRIPFLAGS_LIB   += --strip-unneeded
+QMAKE_OBJCOPY           = $${CROSS_COMPILE}objcopy
+QMAKE_NM                = $${CROSS_COMPILE}nm -P
+load(qt_config)
diff --git a/mkspecs/win32-clang-g++/qplatformdefs.h b/mkspecs/win32-clang-g++/qplatformdefs.h
new file mode 100644
index 0000000000..906e724c19
--- /dev/null
+++ b/mkspecs/win32-clang-g++/qplatformdefs.h
@@ -0,0 +1,40 @@
+/****************************************************************************
+**
+** Copyright (C) 2018 The Qt Company Ltd.
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the qmake spec of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "../win32-g++/qplatformdefs.h"
-- 
2.14.3 (Apple Git-98)

